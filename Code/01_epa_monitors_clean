##############################################################################
# FILE NAME: 01_epa_monitors_clean 
#AUTHOR: Zoe Mitchell 
#PURPOSE: This script loads and cleans the EPA PM2.5 monitors data, defines
# separate data frames for specific analysis purposes (e.g., impacted monitors
# only, and overlays these data frames with satellite data.
# UPDATED: 06-16-2025
##############################################################################


###### Load, Combine and Classify Monitor Data ###### 

# ---- Generate monitor_all data frame by loading and combining ALL (for all years
# and method codes) PM2.5 monitor data ----
monitor_all <- bind_rows(lapply(monitor_files, read_csv, show_col_types = FALSE)) %>%
  clean_names() %>% # clean up column names
  filter(arithmetic_mean > 0) %>% # drop negative PM2.5 values
  mutate(
    Year = as.numeric(substr(date_local, 1, 4)), # extract year from date_local
    # build a site-level ID by concatenating the state ID, county ID, and site number
    state_code  = as.integer(state_code),
    county_code = as.integer(county_code),
    site_num    = as.integer(site_num),
    site_id     = sprintf("%02d%03d%04d", state_code, county_code, site_num)
  )

# ---- Generate monitor_data_impacted data frame, which includes both original and
# updated readings for the miscalibrated monitors ----

impacted_monitors <- monitor_all %>%
  # Filter to monitors that were impacted by miscalibration
  filter(method_code %in% c(original_codes, updated_codes)) %>% 
  # Within the full data for impacted monitors, distinguish between
  # original (incorrect: 236/238) and updated (correct: 736/738) readings
  mutate(method_type = if_else(method_code %in% original_codes, "Original", "Updated"))

# Identify only the impacted sites (method_type = 236/238 --> method_type = 736/738) 
impacted_site_ids <- impacted_monitors %>%
  group_by(site_id) %>%
  filter(any(method_type == "Original") & any(method_type == "Updated")) %>%
  distinct(site_id) %>%
  pull()

# Store the full data (original and updated versions) for impacted monitors in
# new data frame
monitor_data_impacted <- impacted_monitors %>%
  filter(site_id %in% impacted_site_ids)

# Check counts
total_sites   <- n_distinct(impacted_monitors$site_id)
impacted_sites <- length(impacted_site_ids)
dropped_sites <- total_sites - impacted_sites

cat(
  "Sites in 4-code subset:   ", total_sites,   "\n",
  "Sites w/ both Original & Updated: ", impacted_sites, "\n",
  "Sites dropped by filter: ", dropped_sites, "\n",
  "Rows in updated dataset: ", nrow(monitor_data_impacted), "\n",
  "Rows in original dataset: ", nrow(impacted_monitors), "\n"
)

# ---- Generate monitor_data_combined data frame, which combines the entire
# original and updated datasets ----

  # Exclude method codes 736 and 738 to obtain the "original" data 
  monitor_data_original <- monitor_all %>%
    filter(!method_code %in% updated_codes)
  
  # Exclude method codes 236 and 238 to obtain the "updated" data
  monitor_data_updated <- monitor_all %>%
    filter(!method_code %in% original_codes)
  
  # Add a column (data_type) to each data frame that indicates whether the 
  # data is original or updated
  monitor_data_original <- monitor_data_original %>%
    mutate(method_type = "Original")
  
  monitor_data_updated <- monitor_data_updated %>%
    mutate(method_type = "Updated")
  
  # Combine the two data frames to facilitate plotting
  monitor_data_combined <- bind_rows(monitor_data_original, monitor_data_updated)

###### Load Satellite Data ######

# Read in satellite data
sat_list <- lapply(satellite_files, function(f) {
  sat_obj <- get(load(f)) # load in satellite data
  df <- as.data.frame(sat_obj, xy=TRUE) # convert raster to data frame
  colnames(df) <- c("Longitude","Latitude","Satellite.PM2.5") # rename column names for clarity
  df
})

###### Overlay Ground-Level PM2.5 Monitor Data with Satellite Data ######

# ---- Build function to overlay ground-level data with satellite data ----

overlay_monitor_satellite <- function(monitor_data, satellite_files, years, original_label = "Original", updated_label = "Updated", out_names = c("monitor_data_original", "monitor_data_updated", "Satellite")) {
  result_list <- list()
  for (yr in years_satellite) {
    mon_sub <- filter(monitor_data, Year == yr)
    sat_r <- raster(get(load(satellite_files[[as.character(yr)]])))
    crs(sat_r) <- "+proj=longlat +datum=WGS84"
    
    original_pts <- filter(mon_sub, method_type == original_label)
    updated_pts  <- filter(mon_sub, method_type == updated_label)
    
    coordinates(original_pts) <- ~ longitude + latitude
    proj4string(original_pts) <- CRS("+proj=longlat +datum=WGS84")
    coordinates(updated_pts) <- ~ longitude + latitude
    proj4string(updated_pts) <- CRS("+proj=longlat +datum=WGS84")
    
    # Rasterize each
    r_original <- rasterize(original_pts, sat_r, field = "arithmetic_mean", fun = mean, na.rm = TRUE)
    r_updated  <- rasterize(updated_pts, sat_r, field = "arithmetic_mean", fun = mean, na.rm = TRUE)
    
    # Stack and extract to dataframe
    stk <- stack(r_original, r_updated, sat_r)
    names(stk) <- out_names
    
    df <- as.data.frame(stk, xy = TRUE, na.rm = TRUE)
    df$Year <- yr
    result_list[[as.character(yr)]] <- df
  }
  bind_rows(result_list)
}

# ---- Call function to overlay data ----

# For impacted monitors
monitor_satellite_data_impacted <- overlay_monitor_satellite(
  monitor_data_impacted, satellite_files, 2017:2022,
  original_label = "Original", updated_label = "Updated",
  out_names = c("Original_monitor_data_impacted", "Updated_monitor_data_impacted", "Satellite")
)

monitor_satellite_long_impacted <- pivot_longer(
  monitor_satellite_data_impacted,
  cols = c("Original_monitor_data_impacted", "Updated_monitor_data_impacted"),
  names_to = "Source", values_to = "Monitor_PM2.5"
)

# For all monitors
monitor_satellite_data_alldata <- overlay_monitor_satellite(
  monitor_data_combined, satellite_files, 2017:2022,
  original_label = "Original", updated_label = "Updated",
  out_names = c("monitor_data_original", "monitor_data_updated", "Satellite")
)

monitor_satellite_long_alldata <- pivot_longer(
  monitor_satellite_data_alldata,
  cols = c("monitor_data_original", "monitor_data_updated"),
  names_to = "Source", values_to = "Monitor_PM2.5"
)


